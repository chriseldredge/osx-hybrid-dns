#!/bin/bash

source /usr/local/etc/dns-watch/settings

function log {
    echo `date +%Y-%m-%dT%H:%M:%S` $0 $*
}

function go {
    log network changed

    PRIMARY_SERVICE=`echo "show State:/Network/Global/IPv4" | scutil | awk '/PrimaryService/ { print $3 }'`

    if [ -z "${PRIMARY_SERVICE}" ]; then
        log No PrimaryService is configured.
        return
    fi

    PRIMARY_INTERFACE=`echo "show State:/Network/Global/IPv4" | scutil | awk '/PrimaryInterface/ { print $3 }'`

    ALL_SERVICES=($(echo list | scutil | grep -e 'State:/Network/Service/.*/IPv4' | awk -F / '{print $4}'))

    PRIMARY_DNS=

    for KEY in ${ALL_SERVICES[@]}; do
        if [ "$KEY" == "com.cisco.anyconnect" ]; then
            continue
        fi

        echo show State:/Network/Service/$KEY/IPv4 | scutil | grep -s -q "ConfirmedInterfaceName : ${PRIMARY_INTERFACE}"
        res=$?
        if [ $res -eq 0 ]; then
            PRIMARY_DNS=$(echo show State:/Network/Service/$KEY/DNS | scutil | grep -e '[0-9] : [0-9]' | tr -d ' ' | cut -d: -f2)
            break
        fi
    done

    if [ -z "${PRIMARY_DNS}" ]; then
        log "Unable to determine local network DNS servers."
        return
    fi
    
    SERVICE_DNS=$(echo show State:/Network/Service/$PRIMARY_SERVICE/DNS | scutil | grep -e '[0-9] : [0-9]' | tr -d ' ' | cut -d: -f2)

    log PrimaryInterface: $PRIMARY_INTERFACE
    log PrimaryService: $PRIMARY_SERVICE
    log PrimaryInterfaceDNS: $PRIMARY_DNS
    log ActiveServices: ${ALL_SERVICES[*]}

    if [ "$PRIMARY_DNS" != "$SERVICE_DNS" ]; then
        log $PRIMARY_SERVICE DNS: $SERVICE_DNS
    fi

    if [ "$PRIMARY_DNS" == "127.0.0.1" ]; then
        log "dnsmasq already configured."
    else
        log "telling dnsmasq to use $PRIMARY_DNS."

        resolv_conf=/usr/local/etc/dnsmasq-resolv.conf
        > $resolv_conf
        for i in $PRIMARY_DNS; do
            echo nameserver $i >>$resolv_conf
        done
    fi

    log setting $PRIMARY_SERVICE DNS to 127.0.0.1

    #TODO: determine correct search domains to use based on active services
    scutil <<-EOT
        open
        get State:/Network/Service/$PRIMARY_SERVICE/DNS
        d.add ServerAddresses * 127.0.0.1
        set State:/Network/Service/$PRIMARY_SERVICE/DNS
        close
EOT

    shopt -s nullglob
    ACTIVE_PROFILES=(/usr/local/etc/dnsmasq.enabled/*.profile)

    # Deactivate inactive services
    for path in ${ACTIVE_PROFILES[@]}; do
        file=$(basename $path .profile)
        if [[ ! ${ALL_SERVICES[@]} =~ "$file" ]]; then
            log "disable dnsmasq profile $file"
            rm -f $path
        fi
    done

    for svc in ${ALL_SERVICES[@]}; do
        if [ -f /usr/local/etc/dnsmasq.available/${svc}.profile ]; then
            log "enable dnsmasq profile $svc"
            ln -f -s /usr/local/etc/dnsmasq.available/${svc}.profile /usr/local/etc/dnsmasq.enabled
        fi
    done

    log reload dnsmasq
    launchctl stop homebrew.mxcl.dnsmasq-regex
    launchctl start homebrew.mxcl.dnsmasq-regex

    log reload $DNS_SERVICE
    killall -HUP $DNS_SERVICE
}

go >>$LOG 2>&1
